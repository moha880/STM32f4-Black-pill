#include "LIB/STD_TYPES.h"
#include "LIB/BIT_MATH.h"

#include "MCAL/SPI/SPI_init.h"
#include "MCAL/UART/UART_interface.h"

#include "HAL/PWM_DCmotor/PWM_DCmotor_init.h"
#include "HAL/TFT/TFT_init.h"
#include "HAL/LED/LED_int.h"

#include "car_image.h"
extern USART_InitType         MUART_Init ;
extern USART_ClockInitTypeDef MUART_clock ;

u8 L_u8ReciveData = 0 ;
void myfun (void)
{
	/*Recived data from UART*/
	L_u8ReciveData = MUART_u8ReadDataRegister(UART1);
}

/*declaration 4motors*/
extern DCmotor_Type M1 ;
extern DCmotor_Type M2 ;
extern DCmotor_Type M3 ;
extern DCmotor_Type M4 ;

void main (void)
{
	u8  L_u8Speed ;
	u8  L_u8Direction ;
	u8  L_u8Flag ;

	MUART_voidInit(&MUART_Init , &MUART_clock , UART1) ;
	MUART1_voidSetCallBack(myfun) ;
	MUART_RxIntSetStatus (UART1 , ENABLE) ;
	MUART_voidEnable (UART1) ;

	/*initialize 4motors*/
	HDC_init (M1) ;
	HDC_init (M2) ;
	HDC_init (M3) ;
	HDC_init (M4) ;

	/*initialization LEDs*/
	HLED_voidLedInitial(LED1_ID) ; /* Green */
	HLED_voidLedInitial(LED2_ID) ; /*  Red  */
	HLED_voidLedInitial(LED3_ID) ; /* Yellow*/

	/*initialization TFT*/
	HTFT_voidInit(SPI2_Type) ;

	HTFT_voidDisplayImage(SPI2_Type , car , sizeof (car) / sizeof (car [0])) ;
	HTFT_voidDisplayString(SPI2_Type , 1 , 3 , (u8*)"Direction =inittial" , YELLOW) ;
	HTFT_voidDisplayString(SPI2_Type , 1 , 4 , (u8*)"Speed     =stop    " , YELLOW) ;
	while (1)
	{

		/*
		              ------------------------
		              | 2bit | 3bits | 3bits |
		              ------------------------
		 */
		/*Encoding recived data and take Direction (second 3bits)*/
		L_u8Direction = L_u8ReciveData & 0x07 ;
		/*Encoding recived data and take Speed (first 4bits)*/
		L_u8Speed = (L_u8ReciveData >> 3) & 0x07 ;
		/*Encoding recived data and take Flag (last bit)*/
		L_u8Flag = L_u8ReciveData >> 6 ;
		if (L_u8ReciveData != 0)
		{
			if (L_u8Speed != 0)
			{
				/*
				 * first speed  = 1 + 0x0A = 0x0B
				 * second speed = 2 + 0x0A = 0x0C
				 * third speed  = 3 + 0x0A = 0x0D
				 */
				L_u8Speed = L_u8Speed + 0xA;

				if (L_u8Direction == 0)  //Forward direction
				{
					HDC_ClockWise(M1 , L_u8Speed) ;
					HDC_ClockWise(M2 , L_u8Speed) ;
					HDC_ClockWise(M3 , L_u8Speed) ;
					HDC_ClockWise(M4 , L_u8Speed) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"Forward " , YELLOW) ;
				}
				else if (L_u8Direction == 1)  //Backward direction
				{
					HDC_CounterClockWise(M1 , L_u8Speed) ;
					HDC_CounterClockWise(M2 , L_u8Speed) ;
					HDC_CounterClockWise(M3 , L_u8Speed) ;
					HDC_CounterClockWise(M4 , L_u8Speed) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"Back    " , YELLOW) ;
				}
				else if (L_u8Direction == 2)  //Right direction
				{
					HDC_Stop(M1) ;
					HDC_Stop(M3) ;
					HDC_ClockWise(M2 , L_u8Speed) ;
					HDC_ClockWise(M4 , L_u8Speed) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"Right   " , YELLOW) ;
				}
				else if (L_u8Direction == 3)  //Left direction
				{
					HDC_ClockWise(M1 , L_u8Speed) ;
					HDC_ClockWise(M3 , L_u8Speed) ;
					HDC_Stop(M2) ;
					HDC_Stop(M4) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"Left    " , YELLOW) ;
				}
				else if (L_u8Direction == 4)  //forward right
				{
					HDC_ClockWise(M1 , 0xa) ;
					HDC_ClockWise(M3 , 0xa) ;
					HDC_ClockWise(M2 , 0xc) ;
					HDC_ClockWise(M4 , 0xc) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"F_Right " , YELLOW) ;
				}
				else if (L_u8Direction == 5)  //forward left
				{
					HDC_ClockWise(M1 , 0xa) ;
					HDC_ClockWise(M3 , 0xa) ;
					HDC_ClockWise(M2 , 0xc) ;
					HDC_ClockWise(M4 , 0xc) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"F_Left  " , YELLOW) ;
				}
				else if (L_u8Direction == 6)  //backward right
				{
					HDC_CounterClockWise(M1 , 0xa) ;
					HDC_CounterClockWise(M3 , 0xa) ;
					HDC_CounterClockWise(M2 , 0xc) ;
					HDC_CounterClockWise(M4 , 0xc) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"B_right  " , YELLOW) ;
				}
				else if (L_u8Direction == 7)  //backward left
				{
					HDC_CounterClockWise(M1 , 0xa) ;
					HDC_CounterClockWise(M3 , 0xa) ;
					HDC_CounterClockWise(M2 , 0xc) ;
					HDC_CounterClockWise(M4 , 0xc) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 3 , (u8*)"B_Left  " , YELLOW) ;
				}
				if (L_u8Speed == 0xB)
				{
					HLED_voidLedOn(LED3_ID) ;
					HLED_voidLedOff(LED2_ID) ;
					HLED_voidLedOff(LED1_ID) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 4 , (u8*)"First " , YELLOW) ;
				}
				else if (L_u8Speed == 0xC)
				{
					HLED_voidLedOn(LED3_ID) ;
					HLED_voidLedOff(LED2_ID) ;
					HLED_voidLedOff(LED1_ID) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 4 , (u8*)"Second" , YELLOW) ;
				}
				else if (L_u8Speed == 0xD)
				{
					HLED_voidLedOn(LED1_ID) ;
					HLED_voidLedOff(LED2_ID) ;
					HLED_voidLedOff(LED3_ID) ;
					HTFT_voidDisplayString(SPI2_Type , 12 , 4 , (u8*)"Third " , YELLOW) ;
				}

				if (L_u8Flag == 0)
				{
					HTFT_voidDisplayString(SPI2_Type , 1 , 5 , (u8*)"Safed Case       " , GREEN) ;
				}
				else if (L_u8Flag == 1)
				{
					HTFT_voidDisplayString(SPI2_Type , 1 , 5 , (u8*)"Un Safed Distance" , RED) ;
				}
				else if (L_u8Flag == 2)
				{
					if (L_u8Direction == 4 || L_u8Direction == 5)
					{
						HTFT_voidDisplayString(SPI2_Type , 1 , 5 , (u8*)"Ignore Order     " , RED) ;
					}
					else if (L_u8Direction == 0)
					{
						HTFT_voidDisplayString(SPI2_Type , 1 , 5 , (u8*)"Limit Speed      " , RED) ;
					}
				}
				else if (L_u8Flag == 3)
				{
					HTFT_voidDisplayString(SPI2_Type , 1 , 5 , (u8*)"Stop Car             " , RED) ;
				}
			}
			else if (L_u8Speed == 0)
			{
				HLED_voidLedOn(LED2_ID) ;
				HLED_voidLedOff(LED1_ID) ;
				HLED_voidLedOff(LED3_ID) ;
				HTFT_voidDisplayString(SPI2_Type , 12 , 4 , (u8*)"Zero  " , YELLOW) ;
			}
		}
	}
}
