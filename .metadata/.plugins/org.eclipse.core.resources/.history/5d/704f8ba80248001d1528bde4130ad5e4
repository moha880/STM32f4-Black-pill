/*
 * STK_prog.c
 *
 *  Created on: Sep 11, 2022
 *      Author: Mahmoud
 */


#include "../../LIB/STD_TYPES.h"
#include "../../LIB/BIT_MATH.h"

#include "STK_int.h"
#include "STK_prv.h"
#include "STK_cfg.h"



static void(*GS_STK_Callback)(void) ;
static u8  G_u8SingleFlag ;



void MSTK_vInit(void){
	/*1- clock source*/
//#if STK_CLK_SOURCE == STK_AHB_DIV_8
	SET_BIT(STK->CTRL, CLKSOURCE);
//#endif
	/*2- Interrup enabel or disable*/
//#if STK_INTERRUPT_EN == ENABLE
	SET_BIT(STK->CTRL, TICKINT);
//#endif

}

void MSTK_vStartTimer(u32 A_u32LoadValue){

}

void MSTK_vStopTimer(void){

}



void MSTK_vSetBusyWait(u32 A_u32Ticks){
	/*
	 * 1- Reset timer value*/
	 STK->VAL = 0;
	 /*
	  *2- LOAD Timer with value*/
	 STK->LOAD = A_u32Ticks;
	 /*3-Start Timer*/
	 SET_BIT(STK->CTRL, CTRL_ENABLE);
	 /*4- Wait for timer flag*/
	 while(GET_BIT(STK->CTRL, COUNTFLAG) != 1){}
	 /*5- Stop the timer*/
	 CLR_BIT(STK->CTRL, CTRL_ENABLE);
}


void MSTK_vSetInterval_single(u32 A_u32Ticks, void(*CallbackFunc)(void))
{
	G_u8SingleFlag = 1;
	/*
	 * 0- SET Callback function*/
	GS_STK_Callback = CallbackFunc;
	 /* 1- Reset timer value*/
	 STK->VAL = 0;
	 /*
	  *2- LOAD Timer with value*/
	 STK->LOAD = A_u32Ticks;
	 /*3-Start Timer*/
	 SET_BIT(STK->CTRL, CTRL_ENABLE);
}

void MSTK_vSetInterval_periodic(u32 A_u32Ticks, void(*CallbackFunc)(void)){
	G_u8SingleFlag = 0;
	/*
	 * 0- SET Callback function*/
	GS_STK_Callback = CallbackFunc;
	 /* 1- Reset timer value*/
	 STK->VAL = 0;
	 /*
	  *2- LOAD Timer with value*/
	 STK->LOAD = A_u32Ticks;
	 /*3-Start Timer*/
	 SET_BIT(STK->CTRL, CTRL_ENABLE);

}


u32 MSTK_u32GetElapsedTime(void){
	return (STK->LOAD - STK->VAL);
}

u32 MSTK_u32GetRemainingTime(void){
	return (STK->VAL);
}

void SysTick_Handler(void){
	if(GS_STK_Callback != NULL){
		GS_STK_Callback();
	}
	/*Stop the timer*/
	if(G_u8SingleFlag){
		CLR_BIT(STK->CTRL, CTRL_ENABLE);
		G_u8SingleFlag = 0;
	}

}

